--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=5 LPM_WIDTH=3 data eq
--VERSION_BEGIN 23.1 cbx_cycloneii 2023:11:29:19:36:39:SC cbx_lpm_add_sub 2023:11:29:19:36:39:SC cbx_lpm_compare 2023:11:29:19:36:39:SC cbx_lpm_decode 2023:11:29:19:36:39:SC cbx_mgl 2023:11:29:19:36:47:SC cbx_nadder 2023:11:29:19:36:39:SC cbx_stratix 2023:11:29:19:36:39:SC cbx_stratixii 2023:11:29:19:36:39:SC  VERSION_END


-- Copyright (C) 2023  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 8 
SUBDESIGN decode_31a
( 
	data[2..0]	:	input;
	eq[4..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	eq_node[4..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode176w[3..0]	: WIRE;
	w_anode194w[3..0]	: WIRE;
	w_anode205w[3..0]	: WIRE;
	w_anode216w[3..0]	: WIRE;
	w_anode227w[3..0]	: WIRE;
	w_anode238w[3..0]	: WIRE;
	w_anode249w[3..0]	: WIRE;
	w_anode260w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	eq[] = eq_node[];
	eq_node[4..0] = eq_wire[4..0];
	eq_wire[] = ( w_anode260w[3..3], w_anode249w[3..3], w_anode238w[3..3], w_anode227w[3..3], w_anode216w[3..3], w_anode205w[3..3], w_anode194w[3..3], w_anode176w[3..3]);
	w_anode176w[] = ( (w_anode176w[2..2] & (! data_wire[2..2])), (w_anode176w[1..1] & (! data_wire[1..1])), (w_anode176w[0..0] & (! data_wire[0..0])), B"1");
	w_anode194w[] = ( (w_anode194w[2..2] & (! data_wire[2..2])), (w_anode194w[1..1] & (! data_wire[1..1])), (w_anode194w[0..0] & data_wire[0..0]), B"1");
	w_anode205w[] = ( (w_anode205w[2..2] & (! data_wire[2..2])), (w_anode205w[1..1] & data_wire[1..1]), (w_anode205w[0..0] & (! data_wire[0..0])), B"1");
	w_anode216w[] = ( (w_anode216w[2..2] & (! data_wire[2..2])), (w_anode216w[1..1] & data_wire[1..1]), (w_anode216w[0..0] & data_wire[0..0]), B"1");
	w_anode227w[] = ( (w_anode227w[2..2] & data_wire[2..2]), (w_anode227w[1..1] & (! data_wire[1..1])), (w_anode227w[0..0] & (! data_wire[0..0])), B"1");
	w_anode238w[] = ( (w_anode238w[2..2] & data_wire[2..2]), (w_anode238w[1..1] & (! data_wire[1..1])), (w_anode238w[0..0] & data_wire[0..0]), B"1");
	w_anode249w[] = ( (w_anode249w[2..2] & data_wire[2..2]), (w_anode249w[1..1] & data_wire[1..1]), (w_anode249w[0..0] & (! data_wire[0..0])), B"1");
	w_anode260w[] = ( (w_anode260w[2..2] & data_wire[2..2]), (w_anode260w[1..1] & data_wire[1..1]), (w_anode260w[0..0] & data_wire[0..0]), B"1");
END;
--VALID FILE
